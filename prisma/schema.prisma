// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                     @id @default(autoincrement())
  email                 String                  @unique
  name                  String
  avatar_url            String?
  password_hash         String
  is_verified           Boolean                 @default(false)
  created_at            DateTime                @default(now())
  EmailVerificationCode EmailVerificationCode[]
  Workspace             Workspace[]
  WorkspaceMember       WorkspaceMember[]
  TaskComment           TaskComment[]
}

model EmailVerificationCode {
  id         Int      @id @default(autoincrement())
  user_id    Int
  user       User     @relation(fields: [user_id], references: [id])
  code       String   @unique
  expires    DateTime
  created_at DateTime @default(now())
}

model Workspace {
  id              Int               @id @default(autoincrement())
  name            String
  description     String?
  owner_id        Int
  owner           User              @relation(fields: [owner_id], references: [id])
  created_at      DateTime          @default(now())
  WorkspaceMember WorkspaceMember[]
  Task            Task[]
}

model WorkspaceMember {
  workspace_id Int
  user_id      Int
  workspace    Workspace @relation(fields: [workspace_id], references: [id])
  user         User      @relation(fields: [user_id], references: [id])

  @@id([workspace_id, user_id])
}

model Task {
  id           Int           @id @default(autoincrement())
  title        String
  description  String?
  status       String        @default("pending")
  priority     String        @default("medium")
  due_date     DateTime?
  created_at   DateTime      @default(now())
  updated_at   DateTime?     @updatedAt
  workspace_id Int
  workspace    Workspace     @relation(fields: [workspace_id], references: [id])
  TaskComment  TaskComment[]
}

model TaskComment {
  id         Int      @id @default(autoincrement())
  task_id    Int
  user_id    Int
  content    String
  created_at DateTime @default(now())
  task       Task     @relation(fields: [task_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id])
}
