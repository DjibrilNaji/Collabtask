generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                  @id @default(uuid())
  email                 String                  @unique
  name                  String
  avatar_url            String?
  emailVerified         Boolean
  image                 String?
  createdAt             DateTime
  updatedAt             DateTime
  EmailVerificationCode EmailVerificationCode[]
  Workspace             Workspace[]
  WorkspaceMember       WorkspaceMember[]
  TaskComment           TaskComment[]
  sessions              Session[]
  accounts              Account[]

  @@map("user")
}

model EmailVerificationCode {
  id         Int      @id @default(autoincrement())
  user_id    String
  user       User     @relation(fields: [user_id], references: [id])
  code       String   @unique
  expires    DateTime
  created_at DateTime @default(now())

  @@map("email_verification_code")
}

model Workspace {
  id              Int               @id @default(autoincrement())
  name            String
  description     String?
  owner_id        String
  owner           User              @relation(fields: [owner_id], references: [id])
  created_at      DateTime          @default(now())
  WorkspaceMember WorkspaceMember[]
  Task            Task[]

  @@map("workspace")
}

model WorkspaceMember {
  workspace_id Int
  user_id      String
  workspace    Workspace @relation(fields: [workspace_id], references: [id])
  user         User      @relation(fields: [user_id], references: [id])

  @@id([workspace_id, user_id])
  @@map("workspace_member")
}

model Task {
  id           Int           @id @default(autoincrement())
  title        String
  description  String?
  status       String        @default("pending")
  priority     String        @default("medium")
  due_date     DateTime?
  created_at   DateTime      @default(now())
  updated_at   DateTime?     @updatedAt
  workspace_id Int
  workspace    Workspace     @relation(fields: [workspace_id], references: [id])
  TaskComment  TaskComment[]

  @@map("task")
}

model TaskComment {
  id         Int      @id @default(autoincrement())
  task_id    Int
  user_id    String
  content    String
  created_at DateTime @default(now())
  task       Task     @relation(fields: [task_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id])

  @@map("task_comment")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
